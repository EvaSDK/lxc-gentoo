#!/bin/bash

#
# lxc: linux Container library

# Authors:
# Gilles Dartiguelongue <gilles.dartiguelongue@esiee.org>

# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.

# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

DISTRO="gentoo"
CACHE="/var/cache/lxc/${DISTRO}"
LOCK="/var/lock/subsys/lxc.${DISTRO}"

# Static defines
WGET="wget --timeout=8 --read-timeout=15 -c -t10 -nd"

# Default configuration value (changed by option parsing)
if [ "$(uname -m)" == "x86_64" ]; then
	ARCH=${ARCH:-amd64}
	SUBARCH=${SUBARCH:-amd64}
else
	ARCH=${ARCH:-x86}
	SUBARCH=${SUBARCH:-$(uname -m)}
fi
ARCH_VARIANT=""


configure_gentoo() {
	# create missing directories
	mkdir -m 755 "${ROOTFS}"/dev/pts 1>/dev/null 2>/dev/null
	mkdir -m 1777 "${ROOTFS}"/dev/shm 1>/dev/null 2>/dev/null
	mkdir -m 755 "${ROOTFS}"/dev/net 1>/dev/null 2>/dev/null
	mknod -m 666 "${ROOTFS}"/dev/net/tun c 10 200 1>/dev/null 2>/dev/null

	# disable getty (keep first for lxc-console)
	sed -e 's/^c[2-9]/#&/' -i "${ROOTFS}"/etc/inittab
	cat <<- EOF >> "${ROOTFS}"/etc/inittab

	# LXC main console
	1:12345:respawn:/sbin/agetty -c --noclear -a root 38400 console linux
	EOF
	# we also blank out /etc/issue here in order to prevent delays spawning
	# login caused by attempts to determine domainname on disconnected
	# containers
	cat <<- EOF > "${ROOTFS}"/etc/issue

	This is LXC host \n (\s \m \r) \t

	EOF

	# quiet login
	touch "${ROOTFS}"/root/.hushlogin

	# clean up default fstab
	cat <<- EOF > "${ROOTFS}"/etc/fstab
	# required to prevent boot-time error display
	none   /          none   defaults  0 0
	tmpfs  /dev/shm   tmpfs  defaults  0 0
	EOF

	# set default localzone
	echo "Etc/UTC" > "${ROOTFS}"/etc/timezone
	chroot "${ROOTFS}" ln -f /usr/share/zoneinfo/Etc/UTC /etc/localtime

	#_configure_network
	cat <<- EOF > "${ROOTFS}"/etc/conf.d/net
	config_eth0="null"
	EOF
	ln -s net.lo "${ROOTFS}"/etc/init.d/net.eth0
	cp /etc/resolv.conf "${ROOTFS}"/etc/resolv.conf
	chroot "${ROOTFS}" rc-update add net.eth0 default

	# set hostname
	cat <<- EOF > "${ROOTFS}"/etc/conf.d/hostname
	HOSTNAME="${NAME}"
	EOF

	# set locale
	cat <<- EOF > "${ROOTFS}"/etc/locale.gen
	en_US.UTF-8 UTF-8
	EOF
	chroot "${ROOTFS}" locale-gen
	chroot "${ROOTFS}" eselect locale set en_US.utf8

	# configure init
	# XXX: fix boot-time interface config wipe under aggressive cap drop
	# (openrc 0.9.8.4 ~sep 2012 - https://bugs.gentoo.org/show_bug.cgi?id=436266)
	sed -e 's/^#rc_sys=""/rc_sys="lxc"/g' \
		-e 's/^#rc_nostop=""/rc_nostop="net.eth0 net.lo"/' \
		-i "${ROOTFS}"/etc/rc.conf

	# XXX: Add missing -lxc keyword to some services for stable openrc
	# XXX: termencoding, fix for error caused by openrc <0.10.2 (~may 2012)
	# XXX: urandom, from boot runlevel (openrc<0.11 leaves it in ~sep 2012)
	local service
	for service in dmesg mount-ro sysctl termencoding urandom ; do
		sed -e 's/^(\s*keyword .*)$/$1 -lxc/' \
			-i "${ROOTFS}"/etc/init.d/${service}
	done

	# adjust default services
	chroot "${ROOTFS}" rc-update del netmount default
	# XXX: termencoding, fix for error caused by openrc <0.10.2 (~may 2012)
	chroot "${ROOTFS}" rc-update del termencoding default

	# set root password
	echo "root:root-too-simple" | chroot "${ROOTFS}" chpasswd
	echo
	echo "Root password is 'root-too-simple', please change !"
	echo
}

# $1: url, $2 destination file
_download_file() {
	local output_file output_basename output_dirname

	output_file="${CACHE}/${2}"
	output_basename="$(basename ${output_file})"
	output_dirname="$(dirname ${output_file})"

	echo -n "Downloading ${output_basename}, please wait... "
	#  - ensure output directory exists
	mkdir -p "${output_dirname}" 1>/dev/null 2>/dev/null
	#  - grab
	${WGET} -O "${output_file}" "${1}" 1>/dev/null 2>/dev/null
	if [ $? -ne 0 ]; then
		echo "failed!"
		exit 1
	fi
	echo "complete."
}

# $1: archive filename, $2: absolute path to extract to
_extract_file() {
	echo -n "Extracting $(basename ${1}) archive... "
	tar -jxf "${CACHE}/${1}" -C "${2}" 1>/dev/null 2>/dev/null
	if [ $? -ne 0 ]; then
		echo "failed!"
		exit 1
	fi
	echo "done."
}

download_gentoo() {
	local url url_latest template variant

	if [ ! -d "${CACHE}" ]; then
		mkdir -p "${CACHE}" 1>/dev/null 2>/dev/null
	fi

	template="${CACHE}/${ARCH}_${SUBARCH}_${ARCH_VARIANT}_rootfs"
	echo -n "Checking for pre-existing cache in ${template}... "

	# FIXME: add a cache expiration verification
	if [ ! -e "${template}" ]; then
		echo "not found."

		# prepend '-' to nonblank ARCH_VARIANT for URL construction
		if [ ! -z "${ARCH_VARIANT}" ]; then
			variant="-${ARCH_VARIANT}"
		else
			variant="${ARCH_VARIANT}"
		fi

		# get latest-stage3.txt file for subpath
		echo -n "Determining path to latest ${DISTRO} ${ARCH}${variant} stage3 archive... "
		url="http://distfiles.gentoo.org/releases/${ARCH}/autobuilds"
		url_latest="${url}/latest-stage3-${SUBARCH}${variant}.txt"
		url_latest_path=$(${WGET} -q -O - "${url_latest}"|tail -n 1)
		echo "${url_latest_path}"

		# download and extract
		url="${url}/${url_latest_path}"
		_download_file "${url}" "stage3-${ARCH}-${url_latest_path}"

		url="http://distfiles.gentoo.org/snapshots/portage-latest.tar.bz2"
		_download_file "${url}" "portage-latest.tar.bz2"

		# make sure we are operating on a clear rootfs cache
		mkdir -p "${template}" #1>/dev/null 2>/dev/null

		_extract_file "stage3-${ARCH}-${url_latest_path}" "${template}" &&
		_extract_file "portage-latest.tar.bz2" "${template}/usr" &&
		: || {
				echo -n "Problem extracting archives, cleaning up..."
				rm -Rf "${template}"
				echo "done."
		}
	else
		echo "found."
	fi

	return $?
}

copy_gentoo() {
	local template
	template="${CACHE}/${ARCH}_${SUBARCH}_${ARCH_VARIANT}_rootfs"

	(
			flock -n -x 200
			# make a local copy of the minidebian
			echo -n "Copying rootfs to ${ROOTFS}..."
			mkdir -p ${ROOTFS} 1>/dev/null 2>/dev/null
			rsync -a "${template}"/ "${ROOTFS}"/ || return 1
			echo "done."
			return 0
	) 200>${LOCK}

	return $?
}

install_gentoo() {
	mkdir -p /var/lock/subsys/
	(
		flock -n -x 200
		if [ $? -ne 0 ]; then
			echo "Cache repository is busy."
			return 1
		fi

		download_gentoo
		if [ $? -ne 0 ]; then
			echo "Failed to download basic gentoo files"
			return 1
		fi

		copy_gentoo
		if [ $? -ne 0 ]; then
			echo "Failed to copy rootfs"
			return 1
		fi

		return 0
	) 200>${LOCK}

	return $?
}

copy_configuration() {
	echo -n "Writing LXC guest configuration... "
	cat <<- EOF > /etc/lxc/${NAME}/config
	#
	# LXC configuration for ${NAME}
	#
	lxc.arch = ${ARCH}
	lxc.utsname = ${NAME}

	# network interface
	lxc.network.type = veth
	lxc.network.flags = up
	# - name in host (max 15 chars; defaults to 'tun'+random)
	lxc.network.veth.pair = ${NAME}
	# - name in guest
	lxc.network.name = eth0
	# enable for bridging
	# (eg. 'brctl addbr br0; brctl setfd br0 0; brctl addif br0 eth0')
	lxc.network.link = br0

	#lxc.network.ipv4 = 172.16.0.1
	#lxc.network.ipv4.gateway = 172.16.0.254

	# root filesystem location
	lxc.rootfs = $(readlink -f ${ROOTFS})

	# mounts that allow us to drop CAP_SYS_ADMIN
	lxc.mount.entry=proc $(readlink -f ${ROOTFS}/proc) proc nodev,noexec,nosuid 0 0
	# disabled for security, see http://blog.bofh.it/debian/id_413
	#lxc.mount.entry=sys $(readlink -f ${ROOTFS}/sys) sysfs defaults 0 0
	lxc.mount.entry=shm $(readlink -f ${ROOTFS}/dev/shm) tmpfs rw,nosuid,nodev,noexec,relatime 0 0
	lxc.mount.entry=run $(readlink -f ${ROOTFS}/run) tmpfs rw,nosuid,nodev,relatime,mode=755 0 0

	# console access
	lxc.tty = 1
	lxc.pts = 128

	# This part is based on 'linux capabilities', see: man 7 capabilities
	# conservative settings:
	#lxc.cap.drop = sys_module mknod mac_override sys_boot
	#
	# You may also wish to drop:
	#  - 'cap_net_raw' (though it breaks ping)
	#  - 'sys_admin' (denies mounts and some other important operations)
	#  - 'fowner'
	# Settings below leaves open: chown dac_override ipc_lock kill lease net_admin
	# net_bind_service net_broadcast net_raw setgid setuid sys_chroot
	# aggressive settings:
	lxc.cap.drop = audit_control audit_write dac_read_search fsetid ipc_owner linux_immutable mac_admin mac_override mknod setfcap sys_boot sys_module sys_pacct sys_ptrace sys_rawio sys_resource sys_time sys_tty_config syslog

	# deny access to all devices by default, explicitly grant some permissions
	#
	#  format is [c|b] [major|*]:[minor|*] [r][w][m]
	#             ^     ^                   ^
	# char/block -'     \`- device number    \`-- read, write, mknod
	#
	# first deny all...
	lxc.cgroup.devices.deny = a
	# /dev/null and zero
	lxc.cgroup.devices.allow = c 1:3 rw
	lxc.cgroup.devices.allow = c 1:5 rw
	# /dev/{,u}random
	lxc.cgroup.devices.allow = c 1:9 rw
	lxc.cgroup.devices.allow = c 1:8 r
	# /dev/pts/*
	lxc.cgroup.devices.allow = c 136:* rw
	lxc.cgroup.devices.allow = c 5:2 rw
	# /dev/tty{1,2}
	lxc.cgroup.devices.allow = c 4:1 rwm
	lxc.cgroup.devices.allow = c 4:0 rwm
	lxc.cgroup.devices.allow = c 5:0 rwm
	lxc.cgroup.devices.allow = c 5:1 rwm
	# /dev/net/tun
	lxc.cgroup.devices.allow = c 10:200 rwm

	EOF
	echo "done."
}

clean() {
	if [ ! -e "${CACHE}" ]; then
		exit 0
	fi

	# lock, so we won't purge while someone is creating a repository
	(
		flock -n -x 200
		if [ $? -ne 0 ]; then
			echo "Cache repository is busy."
			exit 1
		fi

		echo -n "Purging the download cache..."
		rm --preserve-root --one-file-system -rf "${CACHE}" && echo "Done." || exit 1
		exit 0
	) 200>${LOCK}
}

usage()
{
	cat <<- EOF
	$1 -h|--help -p|--path=<path> --clean
	EOF
	return 0
}

options=$(getopt -o hp:n:c -l help,path:,name:,clean,arch:,arch-variant:,subarch: -- "$@")
if [ $? -ne 0 ]; then
	usage $(basename $0)
	exit 1
fi
eval set -- "$options"

while true
do
	case "$1" in
		-h|--help)      usage $0 && exit 0;;
		-p|--path)      path=$2; shift 2;;
		-n|--name)      NAME=$2; shift 2;;
		-c|--clean)     clean=$2; shift 2;;
		--arch)         ARCH=$2; shift 2;;
		--arch-variant) ARCH_VARIANT=$2; shift 2;;
		--subarch)      SUBARCH=$2; shift 2;;
		--)             shift 1; break ;;
		*)              break ;;
	esac
done

if [ ! -z "$clean" -a -z "$path" ]; then
	clean || exit 1
	exit 0
fi

type emerge
if [ $? -ne 0 ]; then
	echo "'emerge' command is missing"
	exit 1
fi

if [ -z "$path" ]; then
	echo "'path' parameter is required"
	exit 1
fi

if [ "$(id -u)" != "0" ]; then
	echo "This script should be run as 'root'"
	exit 1
fi

ROOTFS="${path}/rootfs"

install_gentoo
if [ $? -ne 0 ]; then
	echo "failed to install gentoo"
	exit 1
fi

configure_gentoo
if [ $? -ne 0 ]; then
	echo "failed to configure gentoo for a container"
	exit 1
fi

copy_configuration
if [ $? -ne 0 ]; then
	echo "failed write configuration file"
	exit 1
fi

if [ ! -z $clean ]; then
	clean || exit 1
	exit 0
fi

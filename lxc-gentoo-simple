#!/bin/bash

#
# lxc: linux Container library

# Authors:
# Gilles Dartiguelongue <gilles.dartiguelongue@esiee.org>

# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.

# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

# Detect use under userns (unsupported)
for arg in "$@"; do
    [ "$arg" = "--" ] && break
    if [ "$arg" = "--mapped-uid" -o "$arg" = "--mapped-gid" ]; then
        echo "This template can't be used for unprivileged containers." 1>&2
        echo "You may want to try the \"download\" template instead." 1>&2
        exit 1
    fi
done

# Make sure the usual locations are in PATH
export PATH=$PATH:/usr/sbin:/usr/bin:/sbin:/bin

DISTRO="gentoo"
CACHE="${CACHE:-/var/cache/lxc/${DISTRO}}"
LOCK="/var/lock/subsys/lxc.${DISTRO}"

# Static defines
WGET="wget --timeout=8 --read-timeout=15 -c -t10 -nd"

# Default configuration value (changed by option parsing)
if [ "$(uname -m)" == "x86_64" ]; then
	ARCH=${ARCH:-amd64}
	ARCHVARIANT=${ARCH}
else
	ARCH=${ARCH:-x86}
	ARCHVARIANT="i686"
fi
MIRROR="${MIRROR:-http://distfiles.gentoo.org}"
SKIP_PORTAGE="no"
NAME="gentoo.local"


configure_gentoo() {
	# create missing directories
	mkdir -m 755 "${ROOTFS}"/dev/pts > /dev/null 2>&1
	mkdir -m 1777 "${ROOTFS}"/dev/shm > /dev/null 2>&1
	mkdir -m 755 "${ROOTFS}"/dev/net > /dev/null 2>&1
	mknod -m 666 "${ROOTFS}"/dev/net/tun c 10 200 > /dev/null 2>&1

	# disable getty (keep first for lxc-console)
	sed -e 's/^c[2-9]/#&/' -i "${ROOTFS}"/etc/inittab
	cat <<- EOF >> "${ROOTFS}"/etc/inittab

	# LXC main console
	1:12345:respawn:/sbin/agetty -c --noclear -a root 115200 console linux

	# clean container shutdown on SIGPWR
	pf:12345:powerwait:/sbin/halt
	EOF

	# clean up default fstab
	cat <<- EOF > "${ROOTFS}"/etc/fstab
	# required to prevent boot-time error display
	none   /          none   defaults  0 0
	EOF

	# set default localzone
	echo "Etc/UTC" > "${ROOTFS}"/etc/timezone
	chroot "${ROOTFS}" ln -f /usr/share/zoneinfo/Etc/UTC /etc/localtime

	#_configure_network
	cat <<- EOF > "${ROOTFS}"/etc/conf.d/net
	config_eth0="null"
	EOF
	ln -s net.lo "${ROOTFS}"/etc/init.d/net.eth0
	cp /etc/resolv.conf "${ROOTFS}"/etc/resolv.conf
	chroot "${ROOTFS}" rc-update add net.eth0 default

	# set hostname
	sed -e "s/\(hostname=\)\".*\"/\1\"${NAME}\"/" \
		-i "${ROOTFS}"/etc/conf.d/hostname
	sed -e "/127.0.0.1[ \t]\+localhost/ s/\(localhost\)/${NAME} ${NAME%%.*} \1/" \
		-e "/::1[ \t]\+localhost/ s/\(localhost\)/${NAME} ${NAME%%.*} \1/" \
		-i "${ROOTFS}"/etc/hosts

	# set locale
	cat <<- EOF > "${ROOTFS}"/etc/locale.gen
	en_US.UTF-8 UTF-8
	EOF
	chroot "${ROOTFS}" locale-gen
	chroot "${ROOTFS}" eselect locale set en_US.utf8

	# adjust default services
	chroot "${ROOTFS}" rc-update del netmount default
	# XXX: remove net.lo from boot runlevel (~jan 2013; openrc-0.11.8)
	chroot "${ROOTFS}" rc-update del net.lo default
	# XXX: fix boot-time errors on openrc 0.12.4 related to lo interface being
	# already set up by the host system on our behalf (~jan 2014)
	chroot "${ROOTFS}" rc-update del loopback boot
	# force local provision of 'net' (~jan 2013)
	echo 'rc_provide="net"' >> "${ROOTFS}"/etc/rc.conf

	# set root password
	echo "root:root-too-simple" | chroot "${ROOTFS}" chpasswd
	echo
	echo "Root password is 'root-too-simple', please change !"
	echo
}

# $1: url, $2 destination file
_download_file() {
	local output_file output_basename output_dirname

	output_file="${CACHE}/${2}"
	output_basename="$(basename ${output_file})"
	output_dirname="$(dirname ${output_file})"

	echo "Downloading ${output_basename}, please wait... "
	#  - ensure output directory exists
	mkdir -p "${output_dirname}"
	#  - grab
	${WGET} -O "${output_file}" "${1}"
	if [ $? -ne 0 ]; then
		echo "failed!"
		exit 1
	fi
	echo "done."
}

# $1: archive filename, $2: absolute path to extract to
_extract_file() {
	echo -n "Extracting $(basename ${1}) archive... "
	tar -xpf "${CACHE}/${1}" -C "${2}"
	if [ $? -ne 0 ]; then
		echo "failed!"
		exit 1
	fi
	echo "done."
}

download_gentoo() {
	local url url_latest template variant

	if [ ! -d "${CACHE}" ]; then
		mkdir -p "${CACHE}" > /dev/null 2>&1
	fi

	template="${CACHE}/${ARCH}_${ARCHVARIANT}_rootfs"
	echo -n "Checking for pre-existing cache in ${template}... "

	# FIXME: add a cache expiration verification
	if [ ! -e "${template}" ]; then
		echo "not found."

		# get latest-stage3.txt file for subpath
		echo -n "Determining path to latest ${DISTRO} ${ARCH}${ARCHVARIANT} stage3 archive... "
		url="${MIRROR}/releases/${ARCH}/autobuilds"
		url_latest="${url}/latest-stage3-${ARCHVARIANT}.txt"
		url_latest_path=$(${WGET} -q -O - "${url_latest}"|tail -n 1|cut -f 1 -d ' ')
		echo "${url_latest_path}"

		# download and extract
		url="${url}/${url_latest_path}"
		_download_file "${url}" "stage3-${ARCH}-${url_latest_path}"

		url="${MIRROR}/snapshots/portage-latest.tar.bz2"
		_download_file "${url}" "portage-latest.tar.bz2"

		# make sure we are operating on a clear rootfs cache
		mkdir -p "${template}"

		_extract_file "stage3-${ARCH}-${url_latest_path}" "${template}" &&
		_extract_file "portage-latest.tar.bz2" "${template}/usr" &&
		: || {
				echo -n "Problem extracting archives, cleaning up..."
				rm -Rf "${template}"
				echo "done."
		}
	else
		echo "found."
	fi

	return $?
}

copy_gentoo() {
	local template
	local options
	template="${CACHE}/${ARCH}_${ARCHVARIANT}_rootfs"
	options=""

	# make a local copy of the minimal system
	echo -n "Copying rootfs to ${ROOTFS}..."
	mkdir -p ${ROOTFS}
	if [ "${SKIP_PORTAGE}" = "yes" ]; then
		options="--exclude '${template}/usr/portage'"
	fi

	rsync -Ha ${options} "${template}"/ "${ROOTFS}"/ || return 1
	echo "done."
	return 0
}

install_gentoo() {
	mkdir -p /var/lock/subsys/
	(
		flock -n -x 200
		if [ $? -ne 0 ]; then
			echo "Cache repository is busy."
			return 1
		fi

		download_gentoo
		if [ $? -ne 0 ]; then
			echo "Failed to download basic gentoo files"
			return 1
		fi

		copy_gentoo
		if [ $? -ne 0 ]; then
			echo "Failed to copy rootfs"
			return 1
		fi

		return 0
	) 200>${LOCK}

	return $?
}

copy_configuration() {
	echo -n "Writing LXC guest configuration... "

	if ! grep -q '^lxc.rootfs' ${path}/config ; then
		cat <<- EOF >> ${path}/config
		# root filesystem location
		lxc.rootfs = $(readlink -f ${ROOTFS})
		EOF
	fi

	if [ -e "/usr/share/lxc/config/gentoo.common.conf" ]; then
		cat <<- EOF >> ${path}/config
		# Include common configuration
		lxc.include = /usr/share/lxc/config/gentoo.common.conf
		EOF
	fi

	cat <<- EOF >> ${path}/config
	lxc.arch = ${ARCH}
	lxc.utsname = ${NAME}

	# network interface
	lxc.network.type = veth
	lxc.network.flags = up
	# - name in host (max 15 chars; defaults to 'tun'+random)
	lxc.network.veth.pair = v-${NAME%%.*}-e0
	# - name in guest
	lxc.network.name = eth0
	# enable for bridging
	# (eg. 'brctl addbr br0; brctl setfd br0 0; brctl addif br0 eth0')
	#lxc.network.link = br0

	#lxc.network.ipv4 = 172.16.0.1
	#lxc.network.ipv4.gateway = 172.16.0.254

	# console access
	lxc.tty = 1
	lxc.pts = 128

	# This part is based on 'linux capabilities', see: man 7 capabilities
	# conservative settings:
	#lxc.cap.drop = sys_module mknod mac_override
	#
	# You may also wish to drop:
	#  - 'cap_net_raw' (though it breaks ping)
	#  - 'sys_admin' (denies mounts and some other important operations)
	#  - 'fowner'
	# Settings below leaves open: chown dac_override ipc_lock kill lease net_admin
	# net_bind_service net_broadcast net_raw setgid setuid sys_chroot sys_boot
	# aggressive settings:
	lxc.cap.drop = audit_control audit_write dac_read_search fsetid ipc_owner linux_immutable mac_admin mac_override mknod setfcap sys_module sys_pacct sys_ptrace sys_rawio sys_resource sys_time sys_tty_config syslog

	EOF
	echo "done."
}

clean() {
	if [ ! -e "${CACHE}" ]; then
		exit 0
	fi

	# lock, so we won't purge while someone is creating a repository
	(
		flock -n -x 200
		if [ $? -ne 0 ]; then
			echo "Cache repository is busy."
			exit 1
		fi

		echo -n "Purging the download cache..."
		rm --preserve-root --one-file-system -rf "${CACHE}" && echo "done." || exit 1
		exit 0
	) 200>${LOCK}
}

usage()
{
    cat <<EOF
Template specific options can be passed to lxc-create after a '--' like this:

  lxc-create --name=NAME [-lxc-create-options] -- [-template-options]

Usage: $1 -h|--help -p|--path=<PATH> -n|--name=<NAME>
            [--arch=<ARCH>] [--arch-variant=ARCHVARIANT] [-c|--clean]
            [--mirror=<MIRROR>] [--skip-portage]

Options:
  -h, --help       print this help text
  -c, --clean      only clean up the cache and terminate
  -n, --name=NAME  container name, used to as an identifier for that container,
                   supports FQDN [default=gentoo.local]
  -p, --path=PATH  path to where the container will be created,
                   [default=/var/lib/lxc]
      --arch=ARCH  container architecture. Can be one of: alpha, amd64, arm,
                   hppa, ia64, mips, ppc, s390, sh, sparc or x86
                   [default=host arch]
      --arch-variant=ARCHVARIANT
                   the architecture variation. Usually ARCH, ARCH-hardened or
                   ARCH-hardened+nomultilib [default=ARCH]
      --mirror=MIRROR  mirror to use for downloading stage3 and portage tree
                       snapshot
      --skip-portage   do not install portage tree in container

EOF

	return 0
}

options=$(getopt -o hp:n:c -l help,path:,rootfs:,name:,clean,arch:,arch-variant:,mirror:,skip-portage -- "$@")
if [ $? -ne 0 ]; then
	usage $(basename $0)
	exit 1
fi
eval set -- "$options"

while true
do
	case "$1" in
		-h|--help)      usage $0 && exit 0;;
		-c|--clean)     clean=1; shift 1;;
		-n|--name)      NAME=$2; shift 2;;
		-p|--path)      path=$2; shift 2;;
		--rootfs)       ROOTFS=$2; shift 2;;
		--arch)         ARCH=$2; shift 2;;
		--arch-variant) ARCHVARIANT=$2; shift 2;;
		--mirror)       MIRROR=$2; shift 2;;
		--skip-portage) SKIP_PORTAGE="yes" ; shift 2;;
		--)             shift 1; break ;;
		*)              break ;;
	esac
done

if [ ! -z "$clean" -a -z "$path" ]; then
	clean || exit 1
	exit 0
fi

type emerge
if [ $? -ne 0 ]; then
	echo "'emerge' command is missing"
	exit 1
fi

if [ -z "$path" ]; then
	echo "'path' parameter is required"
	exit 1
fi

if [ "$(id -u)" != "0" ]; then
	echo "This script should be run as 'root'"
	exit 1
fi

# detect rootfs
config="${path}/config"
if [ -z "$ROOTFS" ]; then
    if grep -q '^lxc.rootfs' ${config} 2> /dev/null ; then
        ROOTFS=$(awk -F= '/^lxc.rootfs =/{ print $2 }' ${config})
    else
        ROOTFS="${path}/rootfs"
    fi
fi

install_gentoo
if [ $? -ne 0 ]; then
	echo "failed to install gentoo"
	exit 1
fi

configure_gentoo
if [ $? -ne 0 ]; then
	echo "failed to configure gentoo for a container"
	exit 1
fi

copy_configuration
if [ $? -ne 0 ]; then
	echo "failed write configuration file"
	exit 1
fi

if [ ! -z $clean ]; then
	clean || exit 1
	exit 0
fi
